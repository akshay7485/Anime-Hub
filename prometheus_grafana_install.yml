apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
---
# Prometheus ConfigMap to scrape metrics from Kubernetes Pods
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
    scrape_configs:
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        metrics_path: /metrics
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_name]
            target_label: pod_name
          
---
---
# Scraping Apache metrics for coza-store web app
      - job_name: 'apache-metrics'
        metrics_path: /server-status
        scheme: http
        static_configs:
          - targets: ['anime-hub-service:8080']  # Scrape the /server-status endpoint from the coza-store service
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_label_app]
            target_label: app
            action: keep
            regex: anime-hub
---
            
# Prometheus Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus:latest
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: config-volume
              mountPath: /etc/prometheus/prometheus.yml
              subPath: prometheus.yml
      volumes:
        - name: config-volume
          configMap:
            name: prometheus-config
---
# Prometheus Service exposed via NodePort
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: monitoring
spec:
  ports:
    - port: 9090
      targetPort: 9090
      nodePort: 31000 # NodePort for Prometheus
  selector:
    app: prometheus
  type: NodePort
---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:latest
          ports:
            - containerPort: 3000
          env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              value: "admin"
---
# Grafana Service exposed via NodePort
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
spec:
  ports:
    - port: 3000
      targetPort: 3000
      nodePort: 32000 # NodePort for Grafana
  selector:
    app: grafana
  type: NodePort
---
# Prometheus RBAC for access control
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
  namespace: monitoring
rules:
  - apiGroups: [""]
    resources: ["nodes", "nodes/proxy", "pods", "services", "endpoints", "configmaps", "replicationcontrollers", "secrets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["extensions"]
    resources: ["ingresses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apps"]
    resources: ["deployments"]
    verbs: ["get", "list", "watch"]
---
# Prometheus RBAC ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
  namespace: monitoring
subjects:
  - kind: ServiceAccount
    name: default
    namespace: monitoring
roleRef:
  kind: ClusterRole
  name: prometheus
  apiGroup: rbac.authorization.k8s.io
